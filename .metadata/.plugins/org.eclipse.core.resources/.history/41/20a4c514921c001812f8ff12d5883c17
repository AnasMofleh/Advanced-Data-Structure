package map;

import java.util.LinkedList;

public class SimpleHashMap<K, V> implements Map<K, V> {
	private Entry<K, V>[] table;
	private int numKeys;
	private static final int CAPACITY = 16;
	private static final double LOAD_FACTOR = 0.75;
	private int size;
			
	private static class Entry<K, V> implements Map.Entry<K,V> {
		private K key;
		private V value;
		private Entry<K, V> next;
		
		private Entry(K key, V value) {
			this.key = key;
			this.value = value;
			this.next = null;
		}

		@Override
		public K getKey() {
			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V val) {
			V oldVal = value;
			value = val;
			return oldVal;
		}
		
		public String toString() {
			return getKey() + " = " + getValue();
		}
	}
	
	public SimpleHashMap() {
		table = (Entry<K,V>[]) new Entry[16];
		size = 0;
	}
	
	public SimpleHashMap(int capacity) {
		table = (Entry<K,V>[]) new Entry[capacity];
		size = 0;
	}

	private int index(Object key) {
		K nyckel = (K) key;
		int index = Math.abs(nyckel.hashCode() % table.length);
		return index;
	}
	
	/*private Entry<K,V> re(Object key, V value) {
		Entry<K,V> reen = (Entry<K,V>) new Entry(key, value);
		return reen;
	}*/
	
	private Entry<K,V> find(int index, Object key) {
		Entry<K,V> e = table[index];
		if (e == null) {
			return null;
		} else {
			while(e != null) {
				if(e.getKey().equals(key)){
					return e;
				}
				e = e.next;
			}
		} return null;
	}
	
	@Override
	public V put(K key, V value) {
		int index = index(key);//1 calculate index
		Entry<K, V> e = find(index, key); //2 try if we can find the key at index whitch is länkedlist
		if (e != null) {
			return e.setValue(value);
		} else { // har inte  hittat i hela tablen
		e = new Entry<K,V>(key, value);
		if (table[index] != null) {
			e.next = table[index];
		}
		table[index] = e;
		size++;
		if ((double) size / table.length > 0.75) {
			rehash();
		}
		return null;
		}
	}
	
	@Override
	public V get(Object key) {
		K nyckel = (K) key;
		int index = index(key);
		Entry <K,V> e = find(index, nyckel);
		
		if (e == null) {
			return null;
		} else {
			while (e != null) {
				if (e.getKey().equals(nyckel)) {
					return e.getValue();
				}
				e = e.next;
			}
			return null;
		}
	}
	
	public void rehash() {
		Entry<K, V>[] old = table;//kopiera tabellen
		table = (Entry<K,V>[]) new Entry[old.length*2];// skapa ny tabell
		size= 0; // size på den nya tabellen är 0
		for (int i=0; i< old.length;i++) {
			Entry<K, V> e = old[i];
			while (e != null) {
				put(e.getKey(),e.getValue());
				e = e.next;
			}
		}
	}
	  
	@Override
	public boolean isEmpty() {
		return size == 0;
	}


	@Override
	public V remove(Object n) {
		K key = (K) n;
		int index = index(key);
		Entry<K,V> e = find(index, key);
		
		if (table[index] == null) {
			return null;
		} else if (e == null) {
			return null;
		} else {
			if (e.equals(table[index])) {
				if (e.next == null) {
					Entry<K,V> temp = e;
					table[index] = null;
					size--;
					return e.getValue();
				}
			} else {
				while (e != null) {
					if (e.equals(key)) {
						 Entry<K, V> temp = e;
						 e.next=e.next.next;
						 size--;
						 return e.getValue();
					}
					e = e.next;
				}
			}
		} return null;
	}

	@Override
	public int size() {
		return size;
	}
	
	public String show() {
		StringBuilder sb = new StringBuilder();
		int v = 0;
		for (Entry<K,V> e : table) {
			sb.append(v + "\n");
			v++;
			while(e != null) {
				sb.append(e + " ");
				e = e.next;
			}
			sb.append("\n");
		}
		return sb.toString();
	}
}