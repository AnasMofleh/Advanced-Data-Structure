package map;

import java.util.LinkedList;

public class SimpleHashMap<K, V> implements Map<K, V> {
	Entry<K, V>[] table;
	public int capacity = 16;
	public double loadFactor = 0.75;
	public int size = 0;

	public SimpleHashMap() {
		table = (Entry<K, V>[]) new Entry[16];
		size = 0;
	}

	public SimpleHashMap(int capacity) {
		table = (Entry<K, V>[]) new Entry[capacity];
		size = 0;
	}

	private static class Entry<K, V> implements Map.Entry<K, V> {
		private K key;
		private V value;
		private Entry<K, V> next;

		public Entry(K key, V value) {
			this.key = key;
			this.value = value;
			this.next = null;
		}

		@Override
		public K getKey() {
			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V value) {
			V oldVal = this.value;
			this.value = value;
			return oldVal;
		}

		@Override
		public String toString() {
			return key + " = " + value;
		}
	}

	public String Show() {
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < table.length; i++) {
			while (table[i] != null) {
				s.append(i + "   " + table[i].toString());

			}
		}
		return s.toString();
	}

	@Override
	public V get(Object object) {
		K key = (K) object;
		Entry<K, V> e = find(index(key), key);
		if (e == null)
			return null;
		else {
			return e.value;
		}
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public V put(K key, V value) {
		int index = index(key);// 1 calculate index
		Entry<K, V> e = find(index, key); // 2 try if we can find the key at
											// index whitch is länkedlist
		if (e != null) {
			return e.setValue(value);
		} // har inte hittat i hela tablen
		e = new Entry<K, V>(key, value);
		if (table[index] != null) {
			e.next = table[index];
		}
		table[index] = e;
		size++;
		if ((double) size / table.length > 0.75) {
			rehash();
		}

		return null;
	}

	public void rehash() {
		Entry<K, V>[] old = table;// kopiera tabellen
		table = (Entry<K, V>[]) new Entry[old.length * 2];// skapa ny tabell
		size = 0; // size på den nya tabellen är 0
		for (int i = 0; i < old.length; i++) {
			Entry<K, V> e = old[i];
			while (e != null) {
				put(e.getKey(), e.getValue());
				e = e.next;
			}
		}
	}

	@Override
	public V remove(Object arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		return size;
	}

	private int index(K key) {
		return Math.abs(key.hashCode() % capacity);
	}

	private Entry<K, V> find(int index, K key) {
		Entry<K, V> e = table[index];
		if (e == null) {
			return e;
		} else {
			while (e != null) {
				if (e.getKey().equals(key)) {
					return e;
				} else {
					e = e.next;
				}
			}

		}
		return null;
	}
	
	
	public static void main(String[] args) {
        SimpleHashMap<String, Integer> shm = new SimpleHashMap<>();
        shm.put("Jamil", 123);
        shm.put("Micho", 123);
        shm.put("Gillis", 123);
        shm.put("Frida", 123);
        shm.put("Bettan", 1);
        shm.put("Felix", 23);
        System.out.print(shm.Show());
        System.out.println("-----");
        shm.remove("Jamil");
        shm.rehash();
        System.out.print(shm.Show());
    }

}
